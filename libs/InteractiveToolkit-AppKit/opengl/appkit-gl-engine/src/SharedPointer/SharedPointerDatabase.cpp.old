#include <appkit-gl-engine/SharedPointer/SharedPointer.h>

namespace AppKit
{
    namespace GLEngine
    {

        SharedPointerDatabase *SharedPointerDatabase::Instance()
        {
            static SharedPointerDatabase db;
            return &db;
        }

        void SharedPointerDatabase::notifyDeletion(void *ref)
        {
            std::map<void *, std::vector<SharedPointerBase *>>::iterator it = refs.find(ref);
            if (it != refs.end())
            {
                std::vector<SharedPointerBase *> &pointers = it->second;
                for (unsigned int i = 0; i < pointers.size(); i++)
                    pointers[i]->setnullptr(false);
                refs.erase(it);
            }
        }

        void SharedPointerDatabase::registerPointer(SharedPointerBase *pointer, void *ref)
        {
            if (ref == nullptr || pointer == nullptr)
                return;
            refs[ref].push_back(pointer);
        }

        void SharedPointerDatabase::unregisterPointer(SharedPointerBase *pointer, void *ref)
        {
            if (ref == nullptr || pointer == nullptr)
                return;
            std::map<void *, std::vector<SharedPointerBase *>>::iterator it = refs.find(ref);
            if (it != refs.end())
            {
                std::vector<SharedPointerBase *> &pointers = it->second;
                for (unsigned int i = 0; i < pointers.size(); i++)
                {
                    if (pointers[i] == pointer)
                    {
                        pointers.erase(pointers.begin() + i);

                        if (pointers.size() == 0)
                            refs.erase(it);
                        return;
                    }
                }
            }
        }
    }
}